{"version":3,"sources":["components/AuthorInfo.js","components/Loading.js","components/Comments.js","components/Post.js","components/PostsList.js","Blog.js","serviceWorker.js","index.js"],"names":["AuthorInfo","props","state","user","albums","fetch","this","authorId","then","response","json","setState","getAuthorName","name","prevProps","albumsList","map","album","key","title","className","email","phone","Component","Loading","Comments","comments","loading","postId","comment","id","body","Post","showComments","onSelectPost","selected","currentAuthorName","post","userId","active","onClick","getCommentsLength","PostsList","posts","currentPostId","PostList","Blog","currentAuthorId","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5522c162.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass AuthorInfo extends Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n                user:[],\r\n                albums:[]\r\n        }\r\n\r\n    }\r\n    componentDidMount(){\r\n        {/*FETCH USERS */}\r\n        fetch(`https://jsonplaceholder.typicode.com/users/${this.props.authorId}`)\r\n        .then(response => response.json())\r\n        .then( user =>  {\r\n            this.setState({user})\r\n            this.props.getAuthorName(user.name)\r\n        })\r\n\r\n        {/* FETCH ALBUMS */}\r\n        fetch(`https://jsonplaceholder.typicode.com/users/${this.props.authorId}/albums`)\r\n        .then(response => response.json())\r\n        .then( albums =>  {\r\n            this.setState({albums})     \r\n        })\r\n    }\r\n    componentDidUpdate(prevProps){\r\n        if(this.props.authorId !== prevProps.authorId) {\r\n            fetch(`https://jsonplaceholder.typicode.com/users/${this.props.authorId}`)\r\n            .then(response => response.json())\r\n            .then( user =>  {\r\n              this.setState({user})\r\n              this.props.getAuthorName(user.name)\r\n            })\r\n\r\n            fetch(`https://jsonplaceholder.typicode.com/users/${this.props.authorId}/albums`)\r\n            .then(response => response.json())\r\n            .then( albums =>  {\r\n               this.setState({albums})     \r\n            })\r\n}\r\n        }\r\n        \r\nrender() {\r\n    const user = this.state.user;\r\n    let albumsList = this.state.albums.map( (album) => {\r\n        return (\r\n        <li key={album.title} >{album.title}</li>\r\n        )\r\n    });\r\n    return (\r\n        <div className=\"author\">\r\n            <h3>Athor: {user.name}</h3>\r\n            <p><span className=\"title\" >E-mail: </span><span>{user.email}</span></p>\r\n            <p><span className=\"title\" >Phone: </span><span>{user.phone}</span></p>\r\n            <h3 className=\"album-title\">{user.name} albums</h3>\r\n            <ul>\r\n               {albumsList}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n}\r\n    \r\nAuthorInfo.propTypes = {\r\n    user:PropTypes.object,\r\n    authorId:PropTypes.number.isRequired\r\n}\r\n\r\nexport default AuthorInfo;","import React from 'react';\r\n\r\nconst Loading = () => {\r\n    return (\r\n        <div>\r\n            Loading...\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Loading;","import React, {Component} from 'react';\r\nimport Loading from './Loading'\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Comments extends Component{\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            comments:[],\r\n            loading:true\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n         /*FETCH COMMENTS */\r\n                fetch(`https://jsonplaceholder.typicode.com/posts/${this.props.postId}/comments`)\r\n                .then(response => response.json())\r\n                .then( comments =>  {\r\n                    this.setState({\r\n                        comments:comments,\r\n                        loading:false\r\n                    });\r\n                })\r\n\r\n    }\r\n\r\n    render() {\r\n        let comments =  this.state.comments.map( (comment) => {\r\n            return (\r\n             <div key={comment.id} className=\"comment-row\">\r\n                 <h4>{comment.name}</h4>\r\n                 <p>{comment.body}</p>\r\n             </div>\r\n            );\r\n        }) \r\n        return (\r\n           <>\r\n            { this.state.loading ? <Loading/> : comments }\r\n           </>\r\n         );\r\n    }\r\n   \r\n};\r\n\r\nComments.propTypes = {\r\n    comments:PropTypes.array\r\n}\r\n\r\nexport default Comments;","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Comments from './Comments'\r\n\r\n\r\n\r\nclass Post extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            showComments:false\r\n        }\r\n    }\r\n\r\nrender() {\r\n    const {onSelectPost,selected,currentAuthorName, post:{id,title,body,userId}} = this.props;\r\n    const active  = selected === id ? 'select' : '';\r\n\r\n    return (\r\n        <div\r\n            className={active}\r\n             onClick = {() => onSelectPost(id,userId)}\r\n            >\r\n            <h3>{title}</h3>\r\n            {active && <p>{body}</p>}\r\n            {active && <p className=\"auth-comment\">\r\n                        { <small className=\"comments-btn\"\r\n                            onClick={() => {this.setState({showComments:!this.state.showComments}) }}\r\n                            >comments </small> }\r\n                        {<small>{currentAuthorName}</small> }  \r\n                    </p>}\r\n             { this.state.showComments && <Comments postId={id} getCommentsLength={this.getCommentsLength}/>}\r\n        </div>\r\n    );\r\n    }\r\n   \r\n}\r\nPost.propTypes = {\r\n    post:PropTypes.object.isRequired,\r\n    selected:PropTypes.number,\r\n    onSelectPost:PropTypes.func.isRequired\r\n}\r\n\r\nexport default Post;","import React,{Component} from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport Post from './Post'\r\nimport Loading from './Loading'\r\n\r\n\r\nclass PostsList extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n              posts:[],\r\n              loading:true\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/posts')\r\n            .then(response => response.json())\r\n            .then( posts =>  {\r\n              this.setState({\r\n                posts:posts,\r\n                loading:false\r\n              })\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {onSelectPost,currentPostId,currentAuthorName} = this.props;\r\n        const PostList = this.state.posts.map( (post) => {\r\n            return (\r\n            <Post  \r\n                    key={post.id}\r\n                    post={post}\r\n                    selected={currentPostId}\r\n                    onSelectPost={onSelectPost}\r\n                    currentAuthorName={currentAuthorName}\r\n                />\r\n                )\r\n         })\r\n        return(\r\n            <>\r\n                {!this.state.loading ? PostList : <Loading /> }\r\n            </>\r\n        )\r\n     \r\n    }\r\n}\r\nPostsList.propTypes = {\r\n    onSelectPost:PropTypes.func.isRequired,\r\n    currentPostId:PropTypes.number,\r\n    currentAuthorName:PropTypes.string\r\n}\r\nexport default PostsList","import React,{Component} from 'react';\r\nimport AuthorInfo from './components/AuthorInfo'\r\nimport Loading from './components/Loading'\r\nimport PostsList from './components/PostsList'\r\n\r\nclass Blog extends Component {\r\n\r\n  state = {\r\n    currentAuthorId:null,\r\n    currentPostId:null,\r\n    currentAuthorName:''\r\n  }\r\n\r\n onSelectPost = (id,userId) => {\r\n      this.setState({\r\n        currentAuthorId:userId,\r\n        currentPostId:id \r\n      })\r\n }\r\n getAuthorName = (name) => {\r\n    this.setState({\r\n      currentAuthorName:name\r\n    })\r\n }\r\n\r\n  render() {\r\n //  console.log(this.state.currentPostId)\r\n    return (\r\n      <div className=\"blog\">\r\n        {this.state.loading ? \r\n               <Loading />  :\r\n        <div className=\"posts\">\r\n          <h2>Posts</h2>\r\n          <PostsList \r\n              onSelectPost={this.onSelectPost}\r\n              currentPostId={this.state.currentPostId}\r\n              currentAuthorName={this.state.currentAuthorName}\r\n              />\r\n        </div> }\r\n        {this.state.currentAuthorId !== null && <AuthorInfo authorId={this.state.currentAuthorId} getAuthorName={this.getAuthorName}/>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Blog;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Blog from './Blog';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Blog />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}